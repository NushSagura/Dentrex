/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Dentist as PrismaDentist,
  Appointment as PrismaAppointment,
} from "@prisma/client";

export class DentistServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.DentistCountArgs, "select">): Promise<number> {
    return this.prisma.dentist.count(args);
  }

  async dentists(args: Prisma.DentistFindManyArgs): Promise<PrismaDentist[]> {
    return this.prisma.dentist.findMany(args);
  }
  async dentist(
    args: Prisma.DentistFindUniqueArgs
  ): Promise<PrismaDentist | null> {
    return this.prisma.dentist.findUnique(args);
  }
  async createDentist(args: Prisma.DentistCreateArgs): Promise<PrismaDentist> {
    return this.prisma.dentist.create(args);
  }
  async updateDentist(args: Prisma.DentistUpdateArgs): Promise<PrismaDentist> {
    return this.prisma.dentist.update(args);
  }
  async deleteDentist(args: Prisma.DentistDeleteArgs): Promise<PrismaDentist> {
    return this.prisma.dentist.delete(args);
  }

  async findAppointments(
    parentId: string,
    args: Prisma.AppointmentFindManyArgs
  ): Promise<PrismaAppointment[]> {
    return this.prisma.dentist
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .appointments(args);
  }
}
