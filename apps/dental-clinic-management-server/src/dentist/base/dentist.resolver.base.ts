/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Dentist } from "./Dentist";
import { DentistCountArgs } from "./DentistCountArgs";
import { DentistFindManyArgs } from "./DentistFindManyArgs";
import { DentistFindUniqueArgs } from "./DentistFindUniqueArgs";
import { CreateDentistArgs } from "./CreateDentistArgs";
import { UpdateDentistArgs } from "./UpdateDentistArgs";
import { DeleteDentistArgs } from "./DeleteDentistArgs";
import { AppointmentFindManyArgs } from "../../appointment/base/AppointmentFindManyArgs";
import { Appointment } from "../../appointment/base/Appointment";
import { DentistService } from "../dentist.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Dentist)
export class DentistResolverBase {
  constructor(
    protected readonly service: DentistService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Dentist",
    action: "read",
    possession: "any",
  })
  async _dentistsMeta(
    @graphql.Args() args: DentistCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Dentist])
  @nestAccessControl.UseRoles({
    resource: "Dentist",
    action: "read",
    possession: "any",
  })
  async dentists(
    @graphql.Args() args: DentistFindManyArgs
  ): Promise<Dentist[]> {
    return this.service.dentists(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Dentist, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Dentist",
    action: "read",
    possession: "own",
  })
  async dentist(
    @graphql.Args() args: DentistFindUniqueArgs
  ): Promise<Dentist | null> {
    const result = await this.service.dentist(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Dentist)
  @nestAccessControl.UseRoles({
    resource: "Dentist",
    action: "create",
    possession: "any",
  })
  async createDentist(
    @graphql.Args() args: CreateDentistArgs
  ): Promise<Dentist> {
    return await this.service.createDentist({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Dentist)
  @nestAccessControl.UseRoles({
    resource: "Dentist",
    action: "update",
    possession: "any",
  })
  async updateDentist(
    @graphql.Args() args: UpdateDentistArgs
  ): Promise<Dentist | null> {
    try {
      return await this.service.updateDentist({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Dentist)
  @nestAccessControl.UseRoles({
    resource: "Dentist",
    action: "delete",
    possession: "any",
  })
  async deleteDentist(
    @graphql.Args() args: DeleteDentistArgs
  ): Promise<Dentist | null> {
    try {
      return await this.service.deleteDentist(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Appointment], { name: "appointments" })
  @nestAccessControl.UseRoles({
    resource: "Appointment",
    action: "read",
    possession: "any",
  })
  async findAppointments(
    @graphql.Parent() parent: Dentist,
    @graphql.Args() args: AppointmentFindManyArgs
  ): Promise<Appointment[]> {
    const results = await this.service.findAppointments(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
